
name: CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the specified branches
  push:
    branches: [ template-dev-start, template-prod-start, template-dev, template-prod, dev-*, prod-* ]
  pull_request:
    branches: [ template-dev, template-prod, dev-iframer, dev-world-map, dev-country-info, dev-capitals, prod-iframer, prod-world-map, prod-country-info, prod-capitals ]

env:
  BRANCH: ${{ github.ref_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # Set an env var that holds the name of the team folder we should use in a later job
  set-vars:
    name: Set env vars
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.TEAM_DIR }}
    steps:
      - id: step1
        shell: bash
        run: |
          if [[ ${{ env.BRANCH }} == 'dev-iframer' ]] || [[ env.BRANCH == 'prod-iframer' ]]
          then
            echo "::set-output name=TEAM_DIR::iframer"
          elif [[ ${{ env.BRANCH }} == 'dev-world-map' ]] || [[ env.BRANCH == 'prod-world-map' ]]
          then
            echo "::set-output name=TEAM_DIR::world-map"
          elif [[ ${{ env.BRANCH }} == 'dev-country-info' ]] || [[ env.BRANCH == 'prod-country-info' ]]
          then
            echo "::set-output name=TEAM_DIR::country-info"
          elif [[ ${{ env.BRANCH }} == 'dev-capitals' ]] || [[ env.BRANCH == 'prod-capitals' ]]
          then
            echo "::set-output name=TEAM_DIR::capitals"
          fi

  test-unit:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

  test-rest:
    name: Run REST API tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

  test-bdd:
    name: Run BDD tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

  build-and-push-dev:
    name: Build and push dev image to Docker Hub
    needs: [ set-vars, test-unit, test-rest, test-bdd ]
    # Check if we are on one of the main dev branches
    if: |
      github.event_name == 'pull_request' && github.ref_type == 'branch' &&
      (
        github.ref_name == 'dev-iframer' ||
        github.ref_name == 'dev-world-map' ||
        github.ref_name == 'dev-country-info' ||
        github.ref_name == 'dev-capitals'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ needs.set-vars.outputs.output1 }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/devops21-metodik2:${{ env.BRANCH }}-latest

  pull-and-deploy-dev:
    name: Pull and deploy dev image to server
    needs: [ build-and-push-dev ]
    runs-on: ubuntu-latest
    env:
      PORT: ${{ secrets.DEV_APP_PORT }}
      DEV_SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
    steps:
    - name: Check if development server is defined
      if: "${{ env.DEV_SSH_HOST == '' }}"
      run: exit 1
    - name: Setup SSH
      env:
        DEV_SSH_USER: ${{ secrets.DEV_SSH_USER }}
        DEV_SSH_PORT: ${{ secrets.DEV_SSH_PORT }}
        DEV_SSH_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh/
        echo "$DEV_SSH_KEY" > ~/.ssh/dev.key
        chmod 600 ~/.ssh/dev.key
        cat >~/.ssh/config <<_EOF_
        Host dev
          HostName $DEV_SSH_HOST
          User $DEV_SSH_USER
          Port $DEV_SSH_PORT
          IdentityFile ~/.ssh/dev.key
          StrictHostKeyChecking no
        _EOF_
